name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Create stub packages
        run: |
          # Create stub @avantle/core package
          mkdir -p core/packages/core/dist
          cat > core/packages/core/package.json << 'STUB_EOF'
          {
            "name": "@avantle/core",
            "version": "0.1.0",
            "main": "dist/index.js",
            "types": "dist/index.d.ts"
          }
          STUB_EOF
          
          cat > core/packages/core/dist/index.js << 'STUB_EOF'
          export class CryptoService {
            static async deriveKey() { return {}; }
            static async encrypt() { return { data: '', iv: '' }; }
            static async decrypt() { return ''; }
            static generateSalt() { return new Uint8Array(32); }
          }
          export class StoreService {
            async init() {}
            async saveNote() {}
            async loadNote() { return null; }
            async listNotes() { return []; }
            async deleteNote() {}
            static getSalt() { return null; }
            static setSalt() {}
            static generateId() { return 'test-id'; }
          }
          export class RDFStore {
            addTriple() {}
            removeTriple() {}
            querySelect() { return []; }
            getNotesInFolder() { return []; }
            setNoteFolder() {}
            clear() {}
            getAllTriples() { return []; }
          }
          STUB_EOF
          
          cat > core/packages/core/dist/index.d.ts << 'STUB_EOF'
          export declare class CryptoService {
            static deriveKey(): Promise<any>;
            static encrypt(): Promise<{data: string, iv: string}>;
            static decrypt(): Promise<string>;
            static generateSalt(): Uint8Array;
          }
          export declare class StoreService {
            init(): Promise<void>;
            saveNote(): Promise<void>;
            loadNote(): Promise<any>;
            listNotes(): Promise<any[]>;
            deleteNote(): Promise<void>;
            static getSalt(): any;
            static setSalt(): void;
            static generateId(): string;
          }
          export declare class RDFStore {
            addTriple(): void;
            removeTriple(): void;
            querySelect(): any[];
            getNotesInFolder(): any[];
            setNoteFolder(): void;
            clear(): void;
            getAllTriples(): any[];
          }
          STUB_EOF
          
          # Create stub @avantle/ui package  
          mkdir -p core/packages/ui/dist
          cat > core/packages/ui/package.json << 'STUB_EOF'
          {
            "name": "@avantle/ui",
            "version": "0.1.0",
            "main": "dist/index.js",
            "types": "dist/index.d.ts"
          }
          STUB_EOF
          
          cat > core/packages/ui/dist/index.js << 'STUB_EOF'
          export function Footer() {
            return null;
          }
          STUB_EOF
          
          cat > core/packages/ui/dist/index.d.ts << 'STUB_EOF'
          export declare function Footer(): any;
          STUB_EOF

      - name: Install dependencies
        run: |
          cd apps/notes
          pnpm install

      - name: Build Next.js application
        run: |
          cd apps/notes
          pnpm build

      - name: Run linter
        run: |
          cd apps/notes
          pnpm lint
